import { useState } from 'react';
import Head from 'next/head';
import Link from 'next/link';
import { useRouter } from 'next/router';
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';

interface TestSet {
  id: number;
  title: string;
  description: string;
  difficulty: 'Beginner' | 'Intermediate' | 'Advanced' | 'Expert' | 'Master';
  color: string;
  icon: string;
}

const testSets: TestSet[] = [
  {
    id: 1,
    title: 'Basic Alphabet Set',
    description: 'Test your knowledge of fundamental ISL alphabet signs. Perfect for beginners.',
    difficulty: 'Beginner',
    color: 'from-green-400 to-green-600',
    icon: 'ðŸŒ±'
  },
  {
    id: 2,
    title: 'Intermediate Challenge',
    description: 'More complex sign combinations and letter variations to challenge your skills.',
    difficulty: 'Intermediate',
    color: 'from-blue-400 to-blue-600',
    icon: 'ðŸŒŠ'
  },
  {
    id: 3,
    title: 'Advanced Mastery',
    description: 'Advanced sign language concepts with tricky similar-looking letters.',
    difficulty: 'Advanced',
    color: 'from-purple-400 to-purple-600',
    icon: 'ðŸŽ¯'
  },
  {
    id: 4,
    title: 'Expert Level',
    description: 'Expert-level questions focusing on subtle differences and advanced techniques.',
    difficulty: 'Expert',
    color: 'from-orange-400 to-orange-600',
    icon: 'ðŸ”¥'
  },
  {
    id: 5,
    title: 'Master Challenge',
    description: 'The ultimate test for ISL alphabet mastery. Only true experts can ace this!',
    difficulty: 'Master',
    color: 'from-red-400 to-red-600',
    icon: 'ðŸ‘‘'
  }
];

export default function TestSets() {
  const router = useRouter();
  const [selectedSet, setSelectedSet] = useState<number | null>(null);
  const [loading, setLoading] = useState(false);

  const handleStartTest = async (setId: number) => {
    setLoading(true);
    setSelectedSet(setId);
    
    try {
      // Navigate to the exam page with the selected set
      router.push(`/exam/${setId}`);
    } catch (error) {
      console.error('Error starting test:', error);
      setLoading(false);
      setSelectedSet(null);
    }
  };

  return (
    <>
      <Head>
        <title>Test Sets - ISL Learning Platform</title>
        <meta name="description" content="Choose from 5 AI-generated test sets to challenge your Indian Sign Language alphabet knowledge" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="min-h-screen bg-gradient-to-br from-orange-50 to-red-50">
        <Navbar />
        
        {/* Header Section */}
        <section className="pt-24 pb-12 bg-gradient-to-r from-orange-500 to-red-500">
          <div className="container mx-auto px-4 text-center">
            <h1 className="text-5xl font-bold text-white mb-6">
              Choose Your Challenge
            </h1>
            <p className="text-xl text-white/90 max-w-3xl mx-auto">
              Select from 5 AI-powered test sets, each containing 10 unique questions 
              generated by Gemini AI. Test your ISL alphabet knowledge!
            </p>
          </div>
        </section>

        {/* Test Sets Grid */}
        <section className="py-16">
          <div className="container mx-auto px-4">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-6xl mx-auto">
              {testSets.map((set) => (
                <div
                  key={set.id}
                  className="bg-white rounded-2xl shadow-soft overflow-hidden hover:shadow-strong transition-all duration-500 transform hover:scale-105 hover:-translate-y-2"
                >
                  {/* Set Header */}
                  <div className={`bg-gradient-to-r ${set.color} p-6 text-white relative overflow-hidden`}>
                    <div className="absolute top-0 right-0 text-6xl opacity-10 transform rotate-12 translate-x-4 -translate-y-2">
                      {set.icon}
                    </div>
                    <div className="relative z-10">
                      <div className="flex items-center justify-between mb-2">
                        <span className="text-2xl">{set.icon}</span>
                        <span className="bg-white/20 px-3 py-1 rounded-full text-sm font-medium">
                          Set {set.id}
                        </span>
                      </div>
                      <h3 className="text-2xl font-bold mb-2">{set.title}</h3>
                      <div className="flex items-center space-x-2">
                        <span className="bg-white/30 px-2 py-1 rounded text-sm font-medium">
                          {set.difficulty}
                        </span>
                        <span className="text-sm opacity-90">â€¢ 10 Questions</span>
                      </div>
                    </div>
                  </div>

                  {/* Set Content */}
                  <div className="p-6">
                    <p className="text-gray-600 mb-6 leading-relaxed">
                      {set.description}
                    </p>

                    {/* Features */}
                    <div className="space-y-2 mb-6">
                      <div className="flex items-center text-sm text-gray-500">
                        <svg className="w-4 h-4 mr-2 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                          <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                        </svg>
                        AI-Generated Questions
                      </div>
                      <div className="flex items-center text-sm text-gray-500">
                        <svg className="w-4 h-4 mr-2 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                          <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                        </svg>
                        Image-Based Answers
                      </div>
                      <div className="flex items-center text-sm text-gray-500">
                        <svg className="w-4 h-4 mr-2 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                          <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                        </svg>
                        Instant Feedback
                      </div>
                    </div>

                    {/* Start Button */}
                    <button
                      onClick={() => handleStartTest(set.id)}
                      disabled={loading && selectedSet === set.id}
                      className={`w-full bg-gradient-to-r ${set.color} text-white font-bold py-3 px-6 rounded-xl hover:shadow-lg transition-all duration-300 transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none`}
                    >
                      {loading && selectedSet === set.id ? (
                        <div className="flex items-center justify-center">
                          <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>
                          Loading Questions...
                        </div>
                      ) : (
                        <div className="flex items-center justify-center">
                          Start Test
                          <svg className="ml-2 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1.5a1.5 1.5 0 011.5 1.5V13a1.5 1.5 0 01-1.5 1.5H9m6 0V9a1.5 1.5 0 011.5-1.5H18a1.5 1.5 0 011.5 1.5v1.5a1.5 1.5 0 01-1.5 1.5h-1.5m-6 0H9" />
                          </svg>
                        </div>
                      )}
                    </button>
                  </div>
                </div>
              ))}
            </div>

            {/* Back to Learn Button */}
            <div className="text-center mt-12">
              <Link
                href="/learn"
                className="inline-flex items-center text-orange-600 hover:text-orange-700 font-medium transition-colors"
              >
                <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                </svg>
                Back to Learning
              </Link>
            </div>
          </div>
        </section>

        <Footer />
      </div>
    </>
  );
}
